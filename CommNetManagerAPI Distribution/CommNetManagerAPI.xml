<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CommNetManagerAPI</name>
    </assembly>
    <members>
        <member name="T:CommNetManagerAPI.CommNetExtensions">
            <summary>
            Extension methods for use with CommNet.
            </summary>
        </member>
        <member name="M:CommNetManagerAPI.CommNetExtensions.TryGetVessel(CommNet.CommNode,Vessel@)">
            <summary>
            Similar to <see cref="M:CommNetManagerAPI.CommNetExtensions.GetVessel(CommNet.CommNode)"/> but returns a bool indicating success.
            </summary>
            <param name="commNode">The node to find the parent vessel of.</param>
            <param name="vessel">The returned vessel.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:CommNetManagerAPI.CommNetExtensions.GetVessel(CommNet.CommNode)">
            <summary>
            Gets the <see cref="T:Vessel"/>  associated with a <see cref="T:CommNet.CommNode"/>.
            </summary>
            <param name="commNode">The node to find the parent vessel of.</param>
        </member>
        <member name="T:CommNetManagerAPI.CNMAttrAndOr">
            <summary>
            Method attribute used to specify if the method returning a bool should be joined to other cooperating methods using AND or OR.
            <para>WARNING: Methods that implement 'OR' MUST NOT call base.method() in their body.</para>
            <para>Since the stock method will be called anyway, methods should not call base.method() anyway in their body if they detect a CommNetManager installation.</para>
            <para>Instead, methods implementing 'AND' should return true and methods implementing 'OR' should return false.</para>
            <para>NOTE: Methods implementing 'OR' should generally also be marked 'EARLY' and methods implementing 'AND' should generally be marked 'LATE'.</para>
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="F:CommNetManagerAPI.CNMAttrAndOr.andOr">
            <exclude />
        </member>
        <member name="T:CommNetManagerAPI.CNMAttrAndOr.options">
            <exclude />
        </member>
        <member name="F:CommNetManagerAPI.CNMAttrAndOr.options.AND">
            <exclude />
        </member>
        <member name="F:CommNetManagerAPI.CNMAttrAndOr.options.OR">
            <exclude />
        </member>
        <member name="M:CommNetManagerAPI.CNMAttrAndOr.#ctor(CommNetManagerAPI.CNMAttrAndOr.options)">
            <summary>
            Initializes a new instance of the <see cref="T:CommNetManagerAPI.CNMAttrAndOr"/> class.
            </summary>
            <param name="andOr">Enum specifying the option selected.</param>
        </member>
        <member name="M:CommNetManagerAPI.CNMAttrAndOr.ToString">
            <exclude />
        </member>
        <member name="T:CommNetManagerAPI.CNMAttrSequence">
            <summary>
            Method attribute used to specify if the method should be called before or after the stock method.
            <para>CAUTION: Methods should not call base.method() in their body if they detect a CommNetManager installation.</para>
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="F:CommNetManagerAPI.CNMAttrSequence.when">
            <exclude />
        </member>
        <member name="T:CommNetManagerAPI.CNMAttrSequence.options">
            <exclude />
        </member>
        <member name="F:CommNetManagerAPI.CNMAttrSequence.options.EARLY">
            <exclude />
        </member>
        <member name="F:CommNetManagerAPI.CNMAttrSequence.options.LATE">
            <exclude />
        </member>
        <member name="F:CommNetManagerAPI.CNMAttrSequence.options.POST">
            <exclude />
        </member>
        <member name="M:CommNetManagerAPI.CNMAttrSequence.#ctor(CommNetManagerAPI.CNMAttrSequence.options)">
            <summary>
            Initializes a new instance of the <see cref="T:CommNetManagerAPI.CNMAttrSequence"/> class.
            </summary>
            <param name="when">Enum specifying the option selected.</param>
        </member>
        <member name="M:CommNetManagerAPI.CNMAttrSequence.ToString">
            <exclude />
        </member>
        <member name="T:CommNetManagerAPI.CNMAttrBefore">
            <summary>
            Method attribute to specify that the method in question should precede the target type's method.
            <para /> Not yet implemented. 
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="F:CommNetManagerAPI.CNMAttrBefore.target">
            <exclude />
        </member>
        <member name="M:CommNetManagerAPI.CNMAttrBefore.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommNetManagerAPI.CNMAttrBefore"/> class.
            </summary>
            <param name="target">The target class.</param>
        </member>
        <member name="T:CommNetManagerAPI.CNMAttrAfter">
            <summary>
            Method attribute to specify that the method in question should be preceded by the target type's method.
            <para /> Not yet implemented. 
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="F:CommNetManagerAPI.CNMAttrAfter.target">
            <exclude />
        </member>
        <member name="M:CommNetManagerAPI.CNMAttrAfter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommNetManagerAPI.CNMAttrAfter"/> class.
            </summary>
            <param name="target">The target class.</param>
        </member>
        <member name="T:CommNetManagerAPI.CommNetManagerChecker">
            <summary>
            Static API class to facilitate checking if CommNetManager is installed.
            </summary>
            <remarks>
            Use <see cref="P:CommNetManagerAPI.CommNetManagerChecker.CommNetManagerInstalled"/> to determine if CommNetManager is installed.<para />
            Use <see cref="M:CommNetManagerAPI.CommNetManagerChecker.SetCommNetManagerIfAvailable(CommNet.CommNetScenario)"/> to activate CommNetManager if it is installed.<para />
            Use <see cref="M:CommNetManagerAPI.CommNetManagerChecker.GetCommNetManagerInstance"/> to get the handle to the current CommNetManagerNetwork instance.<para />
            </remarks>
        </member>
        <member name="P:CommNetManagerAPI.CommNetManagerChecker.CommNetManagerInstalled">
            <summary>
            Checks if CommNetManager is installed.
            </summary>
            <returns>True if CommNetManager is installed.</returns>
            <remarks>
            Result is cached to minimize Reflection calls.
            </remarks>
        </member>
        <member name="M:CommNetManagerAPI.CommNetManagerChecker.GetCommNetManagerInstance">
            <summary>
            Gets the current instance of the CommNetManagerNetwork.
            </summary>
            <returns>Null if CommNetManager is not installed.</returns>
        </member>
        <member name="M:CommNetManagerAPI.CommNetManagerChecker.BindToCommNetManager(CommNet.CommNetwork)">
            <summary>
            Binds the provided CommNetwork to the current CommNetManagerNetwork instance.
            </summary>
            <param name="bind">The derived CommNetwork instance which should be bound to CommNetManagerNetwork.</param>
            <returns>True if succesful at binding, false if not.</returns>
            <remarks>
            This method links the protected fields inherited from CommNet.Network.Net<para />
            <list type="bullet">
            <listheader><description>CAUTION: When bound to CommNetManager, you should ensure the following methods do not call base.method():<para /></description></listheader>
            <item><description>Add</description></item>
            <item><description>Remove</description></item>
            <item><description>Connect</description></item>
            <item><description>Disconnect</description></item>
            <item><description>Rebuild</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:CommNetManagerAPI.CommNetManagerChecker.SetCommNetManagerIfAvailable(CommNet.CommNetScenario,System.Type,CommNet.CommNetNetwork@)">
            <summary>
            Sets the CommNetNetwork object to be CommNetManager if CommNetManager is installed or a supplied type if it is not.
            </summary>
            <param name="scenario">Your instance of CommNetScenario.</param>
            <param name="derivativeOfCommNetNetwork">Type of your network to instantiate if CommNetManager is not installed.</param>
            <param name="CustomCommNetNetwork">The handle of the CommNetNetwork object that is being implemented.</param>
            <returns>True if CommNetManager or the supplied Net was instantiated, false if not.</returns>
        </member>
        <member name="M:CommNetManagerAPI.CommNetManagerChecker.SetCommNetManagerIfAvailable(CommNet.CommNetScenario,System.Type)">
            <summary>
            Sets the CommNetNetwork object to be CommNetManager if CommNetManager is installed or a supplied type if it is not.
            </summary>
            <param name="scenario">Your instance of CommNetScenario.</param>
            <param name="derivativeOfCommNetNetwork">Type of your network to instantiate if CommNetManager is not installed.</param>
            <returns>True if CommNetManager or the supplied Net was instantiated, False if not.</returns>
        </member>
        <member name="M:CommNetManagerAPI.CommNetManagerChecker.SetCommNetManagerIfAvailable(CommNet.CommNetScenario,CommNet.CommNetNetwork@)">
            <summary>
            Sets the CommNetNetwork object to be CommNetManager if CommNetManager is installed.
            </summary>
            <param name="scenario">Your instance of CommNetScenario.</param>
            <param name="CustomCommNetNetwork">The handle of the CommNetNetwork object that is being implemented.</param>
            <returns>True if CommNetManager or the supplied Net was instantiated, False if not.</returns>
        </member>
        <member name="M:CommNetManagerAPI.CommNetManagerChecker.SetCommNetManagerIfAvailable(CommNet.CommNetScenario)">
            <summary>
            Sets the CommNetNetwork object to be CommNetManager if CommNetManager is installed.
            </summary>
            <param name="scenario">Your instance of CommNetScenario.</param>
            <returns>True if CommNetManager or the supplied Net was instantiated, False if not.</returns>
        </member>
        <member name="T:CommNetManagerAPI.PublicCommNet">
            <summary>
            Public implementation of many protected methods. Cast a CommNetManager instance to this interface to call these methods.
            <para />USE WITH CAUTION.
            </summary>
        </member>
        <member name="M:CommNetManagerAPI.PublicCommNet.GetInstance">
            <summary>
            Gets the instance of CommNetManagerNetwork.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommNetManagerAPI.PublicCommNet.SetNodeConnection(CommNet.CommNode,CommNet.CommNode)">
            <summary>
            Sets the node connection.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns></returns>
            <remarks>Calls <see cref="M:CommNetManagerAPI.PublicCommNet.TryConnect(CommNet.CommNode,CommNet.CommNode,System.Double,System.Boolean,System.Boolean,System.Boolean)"/>.</remarks> 
        </member>
        <member name="M:CommNetManagerAPI.PublicCommNet.Add(CommNet.CommNode)">
            <summary>
            Adds the specified connection.
            </summary>
            <param name="conn">The connection.</param>
            <returns></returns>
        </member>
        <member name="M:CommNetManagerAPI.PublicCommNet.Add(CommNet.Occluder)">
            <summary>
            Adds the specified connection.
            </summary>
            <param name="conn">The connection.</param>
            <returns></returns>
        </member>
        <member name="M:CommNetManagerAPI.PublicCommNet.Connect(CommNet.CommNode,CommNet.CommNode,System.Double)">
            <summary>
            Connects two nodes.
            <para />Note: This does not set many variables associated with a <see cref="T:CommNet.CommLink"/> . Generally, <see cref="M:CommNetManagerAPI.PublicCommNet.TryConnect(CommNet.CommNode,CommNet.CommNode,System.Double,System.Boolean,System.Boolean,System.Boolean)"/> would do much of that.
            </summary>
            <param name="a">Node A</param>
            <param name="b">Node B</param>
            <param name="distance">The distance between nodes.</param>
            <returns></returns>
        </member>
        <member name="M:CommNetManagerAPI.PublicCommNet.CreateShortestPathTree(CommNet.CommNode,CommNet.CommNode)">
            <summary>
            Creates the shortest path tree.
            </summary>
            <param name="start">The starting node.</param>
            <param name="end">The ending node.</param>
        </member>
        <member name="M:CommNetManagerAPI.PublicCommNet.Disconnect(CommNet.CommNode,CommNet.CommNode,System.Boolean)">
            <summary>
            Disconnects two nodes.
            </summary>
            <param name="a">Node A</param>
            <param name="b">Node B</param>
            <param name="removeFromA">Remove B from A as well.</param>
        </member>
        <member name="M:CommNetManagerAPI.PublicCommNet.FindClosestControlSource(CommNet.CommNode,CommNet.CommPath)">
            <summary>
            Finds the closest control source.
            </summary>
            <param name="from">The CommNode from which to find a control source.</param>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:CommNetManagerAPI.PublicCommNet.FindClosestWhere(CommNet.CommNode,CommNet.CommPath,System.Func{CommNet.CommNode,CommNet.CommNode,System.Boolean})">
            <summary>
            Finds the closest according to some clause.
            </summary>
            <param name="start">The starting node.</param>
            <param name="path">The path.</param>
            <param name="where">The clause.</param>
            <returns></returns>
        </member>
        <member name="M:CommNetManagerAPI.PublicCommNet.FindHome(CommNet.CommNode,CommNet.CommPath)">
            <summary>
            Finds home from a CommNode.
            </summary>
            <param name="from">The CommNode from which to find home.</param>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:CommNetManagerAPI.PublicCommNet.FindPath(CommNet.CommNode,CommNet.CommPath,CommNet.CommNode)">
            <summary>
            Finds a path between two CommNodes.
            </summary>
            <param name="start">The starting node.</param>
            <param name="path">The path.</param>
            <param name="end">The ending node.</param>
            <returns></returns>
        </member>
        <member name="M:CommNetManagerAPI.PublicCommNet.GetLinkPoints(System.Collections.Generic.List{UnityEngine.Vector3})">
            <summary>
            Gets the link points.
            </summary>
            <param name="discreteLines">The discrete lines.</param>
        </member>
        <member name="M:CommNetManagerAPI.PublicCommNet.PostUpdateNodes">
            <summary>
            Called after updating the CommNodes.
            </summary>
        </member>
        <member name="M:CommNetManagerAPI.PublicCommNet.PreUpdateNodes">
            <summary>
            Called before updating the CommNodes.
            </summary>
        </member>
        <member name="M:CommNetManagerAPI.PublicCommNet.Rebuild">
            <summary>
            Rebuilds the network.
            </summary>
        </member>
        <member name="M:CommNetManagerAPI.PublicCommNet.Remove(CommNet.CommNode)">
            <summary>
            Removes the specified connection.
            </summary>
            <param name="conn">The connection.</param>
            <returns></returns>
        </member>
        <member name="M:CommNetManagerAPI.PublicCommNet.Remove(CommNet.Occluder)">
            <summary>
            Removes the specified connection.
            </summary>
            <param name="conn">The connection.</param>
            <returns></returns>
        </member>
        <member name="M:CommNetManagerAPI.PublicCommNet.TestOcclusion(Vector3d,CommNet.Occluder,Vector3d,CommNet.Occluder,System.Double)">
            <summary>
            Tests the occlusion.
            </summary>
            <param name="aPos">a position.</param>
            <param name="a">a.</param>
            <param name="bPos">The b position.</param>
            <param name="b">The b.</param>
            <param name="distance">The distance.</param>
            <returns></returns>
        </member>
        <member name="M:CommNetManagerAPI.PublicCommNet.TryConnect(CommNet.CommNode,CommNet.CommNode,System.Double,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Tries to connect two nodes.
            </summary>
            <param name="a">Node A</param>
            <param name="b">Node B</param>
            <param name="distance">The distance between nodes</param>
            <param name="aCanRelay">Can node A relay?</param>
            <param name="bCanRelay">Can node B relay?</param>
            <param name="bothRelay">Can both nodes relay?</param>
            <returns></returns>
            <remarks>Calls <see cref="M:CommNetManagerAPI.PublicCommNet.Connect(CommNet.CommNode,CommNet.CommNode,System.Double)"/>.</remarks> 
        </member>
        <member name="M:CommNetManagerAPI.PublicCommNet.UpdateNetwork">
            <summary>
            Updates the network.
            </summary>
            <remarks>Calls <see cref="M:CommNetManagerAPI.PublicCommNet.Rebuild"/> and <see cref="M:CommNetManagerAPI.PublicCommNet.SetNodeConnection(CommNet.CommNode,CommNet.CommNode)"/>.</remarks> 
        </member>
        <member name="M:CommNetManagerAPI.PublicCommNet.UpdateShortestPath(CommNet.CommNode,CommNet.CommNode,CommNet.CommLink,System.Double,CommNet.CommNode,CommNet.CommNode)">
            <summary>
            Updates the shortest path between two nodes.
            </summary>
            <param name="a">Node A</param>
            <param name="b">Node B</param>
            <param name="link">The CommLink</param>
            <param name="bestCost">The best cost.</param>
            <param name="startNode">The start node.</param>
            <param name="endNode">The end node.</param>
        </member>
        <member name="M:CommNetManagerAPI.PublicCommNet.UpdateShortestWhere(CommNet.CommNode,CommNet.CommNode,CommNet.CommLink,System.Double,CommNet.CommNode,System.Func{CommNet.CommNode,CommNet.CommNode,System.Boolean})">
            <summary>
            Updates the shortest path with some constraint.
            </summary>
            <param name="a">Node A</param>
            <param name="b">Node B</param>
            <param name="link">The CommLink</param>
            <param name="bestCost">The best cost.</param>
            <param name="startNode">The start node.</param>
            <param name="whereClause">The constraint clause.</param>
            <returns></returns>
        </member>
    </members>
</doc>
